import asyncio

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from database.db import add_users_with_rights_post, get_user_with_rights, \
    get_users_with_rights, update_users_with_rights_all, update_users_del_rights_all, add_update_chat, \
    add_channel_publish, select_channel_publish, delete_channel_publish, select_channels_publish, add_sample, \
    delete_sample, select_sample
from keyboards import admin_panel_kb, admin_panel_edit_users_kb, admin_panel_edit_channel_kb, \
    admin_panel_edit_parser_kb, back_edit_users_kb, delete_users_with_rights, add_all_rights_kb, del_all_rights_kb, \
    back_edit_parser, back_edit_channel_kb, delete_channels_kb, get_samples_kb, back_admin_panel_kb, delete_samples
from routers.admin.operations import is_admin, _get_users_with_rights, delete_user, get_chat, get_channels
from routers.admin.states import AddUser, AddChat, AddChannel, AddSample

router = Router()
PHOTO_ADMIN_PANEL = FSInputFile(path="./img/admin_panel.jpg")


@router.callback_query(F.data == "back_edit_users")
async def admin_panel_add_user_back(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_caption(caption="–†–∞–∑–¥–∞—á–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                                                      "‚úèÔ∏è - –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ø–æ—Å—Ç–∞–º–∏\n"
                                                      "üîì - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É\n\n"
                                                      f"{_get_users_with_rights()}",
                                              reply_markup=admin_panel_edit_users_kb)
    await state.clear()


@router.callback_query(F.data == "back_admin_panel")
async def back_admin_panel(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if is_admin(callback_query.from_user.id):
        await callback_query.message.edit_caption(caption="üÖ∞Ô∏è<b> –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å </b>üÖ∞Ô∏è", reply_markup=admin_panel_kb)


@router.callback_query(F.data == "back_edit_parser")
async def admin_panel_add_user_back(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_caption(caption="–ß–∞—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ—Å—Ç–∞–º–∏ –±–æ—Ç–∞ –∏ —é–∑–µ—Ä–±–æ—Ç–∞\n"
                                                      "–í —ç—Ç–æ–º —á–∞—Ç–µ —é–∑–µ—Ä–±–æ—Ç –∏ —ç—Ç–æ—Ç –±–æ—Ç \n"
                                                      "–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
                                                      f"{get_chat()}",
                                              reply_markup=admin_panel_edit_parser_kb)
    await state.clear()


@router.callback_query(F.data == "back_edit_channel")
async def admin_panel_add_channel_back(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_caption(caption="–í –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
                                                      f"{get_channels()}",
                                              reply_markup=admin_panel_edit_channel_kb)
    await state.clear()


@router.callback_query(AddUser.add)
async def admin_panel_add_user_back(callback_query: types.CallbackQuery):
    await callback_query.answer("–û–∂–∏–¥–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.callback_query(AddChat.add)
async def admin_panel_add_user_back(callback_query: types.CallbackQuery):
    await callback_query.answer("–û–∂–∏–¥–∞—é username —á–∞—Ç–∞")


@router.message(AddSample.add, F.text)
async def admin_panel_edit_sample_delete_add_step2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mess_id = data.get("mess_id")
    text = message.html_text
    add_sample(text)
    await state.clear()
    await message.delete()
    await message.bot.edit_message_caption(chat_id=message.chat.id,
                                           message_id=mess_id,
                                           caption="–ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–ª–æ–≤–∞ —É–¥–∞–ª—è—Ç—å\n"
                                                   "–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é",
                                           reply_markup=get_samples_kb())


@router.callback_query(F.data == "add_sample")
async def admin_panel_edit_sample_delete_add_step1(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–ª–æ–≤–æ",
                                              reply_markup=back_admin_panel_kb)
    await state.set_state(AddSample.add)
    await state.update_data({"mess_id": callback_query.message.message_id})


@router.callback_query(AddSample.add)
async def admin_panel_edit_sample_delete_add_valid(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–û–∂–∏–¥–∞—é —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")


@router.message(F.text == "üÖ∞Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    await message.delete()
    if is_admin(message.from_user.id):
        await message.answer_photo(caption="üÖ∞Ô∏è<b> –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å </b>üÖ∞Ô∏è", reply_markup=admin_panel_kb,
                                   photo=PHOTO_ADMIN_PANEL)


@router.callback_query(F.data == "delete_admin_panel")
async def admin_panel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.delete()


@router.callback_query(F.data == "edit_users")
async def admin_panel_edit_users(callback_query: types.CallbackQuery):
    await callback_query.message.edit_caption(caption="–†–∞–∑–¥–∞—á–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                                                      "‚úèÔ∏è - –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ø–æ—Å—Ç–∞–º–∏\n"
                                                      "üîì - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É\n\n"
                                                      f"{_get_users_with_rights()}",
                                              reply_markup=admin_panel_edit_users_kb)


@router.callback_query(F.data == "edit_channel")
async def admin_panel_edit_channel(callback_query: types.CallbackQuery):
    await callback_query.message.edit_caption(caption="–í –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
                                                      f"{get_channels()}",
                                              reply_markup=admin_panel_edit_channel_kb)


@router.callback_query(F.data == "edit_parser")
async def admin_panel_edit_parser(callback_query: types.CallbackQuery):
    await callback_query.message.edit_caption(caption="–ß–∞—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ—Å—Ç–∞–º–∏ –±–æ—Ç–∞ –∏ —é–∑–µ—Ä–±–æ—Ç–∞\n"
                                                      "–í —ç—Ç–æ–º —á–∞—Ç–µ —é–∑–µ—Ä–±–æ—Ç –∏ —ç—Ç–æ—Ç –±–æ—Ç \n"
                                                      "–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
                                                      f"{get_chat()}",
                                              reply_markup=admin_panel_edit_parser_kb)


@router.callback_query(F.data == "edit_users_del")
async def admin_panel_delete_users(callback_query: types.CallbackQuery):
    if get_users_with_rights():
        await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?",
                                                  reply_markup=delete_users_with_rights())
    else:
        await callback_query.answer("–ù–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å")


@router.callback_query(F.data.startswith("rights_delete_"))
async def delete_users_rights(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split("rights_delete_")[-1]
    delete_user(user_id)
    if get_users_with_rights():
        await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?",
                                                  reply_markup=delete_users_with_rights())
    else:
        await callback_query.message.edit_caption(caption="–†–∞–∑–¥–∞—á–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                                                          "‚úèÔ∏è - –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ø–æ—Å—Ç–∞–º–∏\n"
                                                          "üîì - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É\n\n"
                                                          f"{_get_users_with_rights()}",
                                                  reply_markup=admin_panel_edit_users_kb)


@router.callback_query(F.data == "edit_users_add")
async def admin_panel_add_user_step1(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                                      "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—é—Ç—Å—è –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ø–æ—Å—Ç–∞–º–∏",
                                              reply_markup=back_edit_users_kb)
    await state.set_state(AddUser.add)
    await state.update_data({"message_id": callback_query.message.message_id})


@router.message(AddUser.add, F.text)
async def admin_panel_add_user_step2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.text.strip()
    user = get_user_with_rights(user_id)
    if user:
        mess_bot = await message.answer("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å")
        await message.delete()
        await asyncio.sleep(3)
        await mess_bot.delete()
        return
    try:
        chat_with_user = await message.bot.get_chat(chat_id=user_id)
    except:
        chat_with_user = None
    if chat_with_user:
        add_users_with_rights_post(chat_with_user.username, user_id)
        await state.clear()
        await message.delete()
        await message.bot.edit_message_caption(chat_id=message.chat.id,
                                               message_id=data.get("message_id"),
                                               caption="–†–∞–∑–¥–∞—á–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                                                       "‚úèÔ∏è - –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ø–æ—Å—Ç–∞–º–∏\n"
                                                       "üîì - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É\n\n"
                                                       f"{_get_users_with_rights()}",
                                               reply_markup=admin_panel_edit_users_kb)
    else:
        bot_mess = await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await message.delete()
        await asyncio.sleep(3)
        await bot_mess.delete()


@router.callback_query(F.data == "add_all_rights")
async def admin_panel_add_user_all_rights(callback_query: types.CallbackQuery):
    await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∞?",
                                              reply_markup=add_all_rights_kb())


@router.callback_query(F.data.startswith("rights_add_all_"))
async def admin_panel_add_user_rights_all(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split("rights_add_all_")[-1]
    if not get_user_with_rights(user_id)[3]:
        update_users_with_rights_all(user_id)
        await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∞?",
                                                  reply_markup=add_all_rights_kb())
    else:
        await callback_query.answer(text="–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞")


# del_all_rights
@router.callback_query(F.data == "del_all_rights")
async def admin_panel_del_user_all_rights(callback_query: types.CallbackQuery):
    await callback_query.message.edit_caption(caption="–£ –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ \n"
                                                      "–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º",
                                              reply_markup=del_all_rights_kb())


@router.callback_query(F.data.startswith("rights_del_all_"))
async def admin_panel_del_user_rights_all(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split("rights_del_all_")[-1]
    if get_user_with_rights(user_id)[3]:
        update_users_del_rights_all(user_id)
        await callback_query.message.edit_caption(caption="–£ –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ \n"
                                                          "–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º",
                                                  reply_markup=del_all_rights_kb())
    else:
        await callback_query.answer(text="–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏—à–µ–Ω –ø—Ä–∞–≤")


@router.callback_query(F.data == "edit_edit_parser")
async def admin_panel_edit_edit_chat_step1(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ username —á–∞—Ç–∞(–±–µ–∑ @)",
                                              reply_markup=back_edit_parser)
    await state.set_state(AddChat.add)
    await state.update_data({"message_id": callback_query.message.message_id})


@router.message(AddChat.add, F.text)
async def admin_panel_edit_edit_chat_step2(message: types.Message, state: FSMContext):
    username = message.text.strip()
    data = await state.get_data()
    try:
        chat = await message.bot.get_chat(f"@{username}")
        if chat.type == "supergroup":
            add_update_chat(username, chat.id)
            await message.bot.edit_message_caption(chat_id=message.chat.id,
                                                   message_id=data.get("message_id"),
                                                   caption="–ß–∞—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ—Å—Ç–∞–º–∏ –±–æ—Ç–∞ –∏ —é–∑–µ—Ä–±–æ—Ç–∞\n"
                                                           "–í —ç—Ç–æ–º —á–∞—Ç–µ —é–∑–µ—Ä–±–æ—Ç –∏ —ç—Ç–æ—Ç –±–æ—Ç \n"
                                                           "–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
                                                           f"{get_chat()}",
                                                   reply_markup=admin_panel_edit_parser_kb)
            await state.clear()
        else:
            bot_mess = await message.answer("–≠—Ç–æ –Ω–µ —á–∞—Ç")
            await asyncio.sleep(3)
            await bot_mess.delete()
    except:
        bot_mess = await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await asyncio.sleep(3)
        await bot_mess.delete()
    finally:
        await message.delete()


@router.callback_query(F.data == "edit_channel_add")
async def admin_panel_add_channel_step1(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_caption(caption="–ü—Ä–∏—à–ª–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ \n"
                                                      "–≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã.\n"
                                                      "–í –∫–∞–Ω–∞–ª–µ —ç—Ç–æ—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                                              reply_markup=back_edit_channel_kb)
    await state.set_state(AddChannel.add)
    await state.update_data({"message_id": callback_query.message.message_id})


@router.message(AddChannel.add, F.text)
async def admin_panel_add_channel_step2(message: types.Message, state: FSMContext):
    username = message.text.strip()
    data = await state.get_data()
    try:
        chat = await message.bot.get_chat(f"@{username}")
        if chat and not select_channel_publish(channel_id=chat.id):
            add_channel_publish(username, chat.id)
            await message.bot.edit_message_caption(chat_id=message.chat.id,
                                                   message_id=data.get("message_id"),
                                                   caption="–í –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
                                                           f"{get_channels()}",
                                                   reply_markup=admin_panel_edit_channel_kb)
            await state.clear()
        else:
            bot_mess = await message.answer("–¢–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å")
            await asyncio.sleep(3)
            await bot_mess.delete()

    except:
        bot_mess = await message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await asyncio.sleep(3)
        await bot_mess.delete()
    finally:
        await message.delete()


@router.callback_query(F.data == "edit_channel_del")
async def admin_panel_edit_channel_del(callback_query: types.CallbackQuery):
    if select_channels_publish():
        await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å?", reply_markup=delete_channels_kb())
    else:
        await callback_query.answer("–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ")


@router.callback_query(F.data.startswith("channel_del_"))
async def admin_panel_edit_channel_del_for_id(callback_query: types.CallbackQuery):
    channel_id = callback_query.data.split("channel_del_")[-1]
    delete_channel_publish(channel_id)
    if select_channels_publish():
        await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å?",
                                                  reply_markup=delete_channels_kb())
    else:
        await callback_query.message.edit_caption(caption="–í –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
                                                          f"{get_channels()}",
                                                  reply_markup=admin_panel_edit_channel_kb)


@router.callback_query(F.data == "sample_delete")
async def admin_panel_edit_sample_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç, —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–ª–æ–≤–∞ —É–¥–∞–ª—è—Ç—å\n"
                                                      "–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é",
                                              reply_markup=get_samples_kb())


@router.callback_query((F.data == "delete_sample") | F.data.startswith("samp_delete_"))
async def admin_panel_edit_sample_delete_del(callback_query: types.CallbackQuery):
    if callback_query.data.startswith("samp_delete_"):
        samp_id = callback_query.data.split("samp_delete_")[-1]
        delete_sample(samp_id)
    await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–π —à–∞–±–ª–æ–Ω —É–¥–∞–ª–∏—Ç—å",
                                              reply_markup=delete_samples())


@router.callback_query(F.data == "delete_sample")
async def admin_panel_edit_sample_delete_del_for_id(callback_query: types.CallbackQuery):
    await callback_query.message.edit_caption(caption="–ö–∞–∫–æ–π —à–∞–±–ª–æ–Ω —É–¥–∞–ª–∏—Ç—å",
                                              reply_markup=delete_samples())


@router.callback_query(F.data.startswith("get_sample_"))
async def get_sample_text(callback_query: types.CallbackQuery):
    await callback_query.answer("")
    samp_id = callback_query.data.split("get_sample_")[-1]
    sample = select_sample(samp_id)[0]
    bot_mess = await callback_query.message.answer(text=sample)
    await asyncio.sleep(3)
    await bot_mess.delete()
